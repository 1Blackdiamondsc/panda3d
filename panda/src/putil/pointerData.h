/**
 * PANDA 3D SOFTWARE
 * Copyright (c) Carnegie Mellon University.  All rights reserved.
 *
 * All use of this software is subject to the terms of the revised BSD
 * license.  You should have received a copy of this license along
 * with this source code in a file named "LICENSE."
 *
 * @file pointerData.h
 * @author drose
 * @date 1999-02-08
 */

#ifndef POINTERDATA_H
#define POINTERDATA_H

#include "pandabase.h"

#include "modifierButtons.h"

BEGIN_PUBLISH
/**
 * Contains the types of pointer device.
 */
enum class PointerType {
  unknown,
  mouse,
  finger,
  stylus,
  eraser,
};

/**
 * The current "phase" of the pointer's lifecycle.
 */
enum class PointerPhase {
  began, // made contact with the screen during the last frame
  moved, // continued interaction with the screen
  ended, // contact ended normally by lifting the pointer or leaving the window.
  cancelled, // contact was interrupted
  hover, // For pointers that don't make contact with the screen; indicates
         // the primary button is not being pressed.
};
END_PUBLISH

/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */
class EXPCL_PANDA_PUTIL PointerData {

public:
  PointerData() = default;
  PointerData(int id, bool primary, PointerType type);

  static PointerData make_primary_mouse();

  INLINE double get_x() const;
  INLINE double get_y() const;
  INLINE bool get_primary() const;
  INLINE int get_id() const;
  INLINE PointerType get_type() const;
  INLINE double get_pressure() const;
  INLINE PointerPhase get_phase() const;

  INLINE void set_type(PointerType type);
  INLINE void set_pressure(double pressure);
  INLINE void set_phase(PointerPhase phase);

  void output(std::ostream &out) const;

PUBLISHED:
  MAKE_PROPERTY(x, get_x);
  MAKE_PROPERTY(y, get_y);
  MAKE_PROPERTY(type, get_type);
  MAKE_PROPERTY(primary, get_primary);
  MAKE_PROPERTY(id, get_id);
  MAKE_PROPERTY(pressure, get_pressure, set_pressure);

  INLINE void update(double x, double y, double pressure, PointerPhase phase);
  INLINE void rel_move(double rx, double ry);

protected:
  int _id = 0;

  /**
   * The primary pointer is what interacts with UI elements and emulates the
   * mouse, if applicable. In the case of touch, this is usually the first
   * finger that makes contact with the screen.
   */
  bool _primary = false;

  /**
   * The pressure of the pointer's contact with the screen. This is really only
   * meaningful for a touchscreen or graphics tablet. For other types of pointer,
   * this will only be 0.0 or 1.0 when one of the primary buttons are being
   * pressed.
   */
  double _pressure = 0.0;

  double _xpos = 0.0;
  double _ypos = 0.0;

  PointerType _type = PointerType::unknown;
  PointerPhase _phase = PointerPhase::hover;
};

INLINE std::ostream &operator << (std::ostream &out, const PointerData &md);

#include "pointerData.I"

#endif
